(()=>{"use strict";var e={307:(e,n,t)=>{var o=t(963),r=t(844),s=(t(919),t(252)),i=t(577);const c={class:"main"},a=(0,s._)("h2",{class:"title"},"Extension Demo3",-1),l={class:"req_title"},u=(0,s.Uk)("request");function d(e,n,t,o,d,f){const p=r.mi;return(0,s.wg)(),(0,s.iD)("div",c,[a,(0,s._)("h3",l,"fetch_fake: "+(0,i.zw)(e.resp),1),(0,s.Wm)(p,{onClick:e.req,type:"success"},{default:(0,s.w5)((()=>[u])),_:1},8,["onClick"])])}var f=t(262);const p=(0,s.aZ)({setup(){let e=(0,f.iH)("null");const n=()=>{const n=chrome.runtime.connect({name:"ping"});n.onMessage.addListener((n=>{console.log(n),e.value=`${n.msg}${n.index}`})),n.postMessage("ping")};return{resp:e,req:n}}});var v=t(744);const m=(0,v.Z)(p,[["render",d]]),h=m,g={class:"content-box"};function b(e,n,t,o,r,i){const c=h;return(0,s.wg)(),(0,s.iD)("div",g,[(0,s.Wm)(c)])}const _=(0,s.aZ)({components:{Req:h}}),w=(0,v.Z)(_,[["render",b]]),x=w;function O(){console.log("extensions_demo_content_inject_id inject");const e="extensions_demo_content_inject_id",n=document.createElement("div");n.id=e,document.body?.appendChild(n);const t=(0,o.ri)(x);t.mount("#"+e)}O()}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var s=n[o]={exports:{}};return e[o](s,s.exports,t),s.exports}t.m=e,(()=>{var e=[];t.O=(n,o,r,s)=>{if(!o){var i=1/0;for(u=0;u<e.length;u++){for(var[o,r,s]=e[u],c=!0,a=0;a<o.length;a++)(!1&s||i>=s)&&Object.keys(t.O).every((e=>t.O[e](o[a])))?o.splice(a--,1):(c=!1,s<i&&(i=s));if(c){e.splice(u--,1);var l=r();void 0!==l&&(n=l)}}return n}s=s||0;for(var u=e.length;u>0&&e[u-1][2]>s;u--)e[u]=e[u-1];e[u]=[o,r,s]}})(),(()=>{t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})}})(),(()=>{t.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()})(),(()=>{t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n)})(),(()=>{var e={529:0};t.O.j=n=>0===e[n];var n=(n,o)=>{var r,s,[i,c,a]=o,l=0;if(i.some((n=>0!==e[n]))){for(r in c)t.o(c,r)&&(t.m[r]=c[r]);if(a)var u=a(t)}for(n&&n(o);l<i.length;l++)s=i[l],t.o(e,s)&&e[s]&&e[s][0](),e[s]=0;return t.O(u)},o=self["webpackChunkextensions_demo"]=self["webpackChunkextensions_demo"]||[];o.forEach(n.bind(null,0)),o.push=n.bind(null,o.push.bind(o))})();var o=t.O(void 0,[998],(()=>t(307)));o=t.O(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,